name: Build and Release

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build executable
        run: pyinstaller --onefile --name translate-bot${{ matrix.os == 'windows-latest' && '.exe' || '' }} translate-bot.py

      - name: Prepare files for Linux and macOS
        if: matrix.os != 'windows-latest'
        run: |
          cp config.py dist/
          cd dist
          ls -la
          zip -r translate_bot_v${{ github.event.release.tag_name }}_${{ matrix.os == 'ubuntu-latest' && 'linux' || 'mac_os_x' }}.zip *

      - name: Prepare files for Windows
        if: matrix.os == 'windows-latest'
        run: |
          Copy-Item config.py -Destination dist\
          cd dist
          Compress-Archive -Path * -DestinationPath translate_bot_v${{ github.event.release.tag_name }}_windows.zip
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: translate_bot_v${{ github.event.release.tag_name }}_${{ matrix.os == 'ubuntu-latest' && 'linux' || (matrix.os == 'windows-latest' && 'windows' || 'mac_os_x') }}.zip
          path: dist/

  upload-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Upload artifacts to release
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const artifactsPath = path.resolve('artifacts');
            const files = fs.readdirSync(artifactsPath);
            for (const file of files) {
              const filePath = path.resolve(artifactsPath, file);
              const stats = fs.statSync(filePath);
              if (stats.isFile()) {
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: context.payload.release.id,
                  name: path.basename(file),
                  data: fs.readFileSync(filePath),
                  headers: {
                    'content-length': stats.size,
                    'content-type': 'application/zip',
                  },
                });
              }
            }
