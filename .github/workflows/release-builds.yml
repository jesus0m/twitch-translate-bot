name: Build and Release

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build executable
        run: pyinstaller --onefile --name translate-bot${{ matrix.os == 'windows-latest' && '.exe' || '' }} translate-bot.py

      - name: Prepare files for Linux and macOS
        if: matrix.os != 'windows-latest'
        run: |
          cp config.py dist/
          cd dist
          ls -la
          zip -r translate_bot_v${{ github.event.release.tag_name }}_${{ matrix.os == 'ubuntu-latest' && 'linux' || 'mac_os_x' }} *

      - name: Prepare files for Windows
        if: matrix.os == 'windows-latest'
        run: |
          Copy-Item config.py -Destination dist\
          cd dist
          Compress-Archive -Path * -DestinationPath translate_bot_v${{ github.event.release.tag_name }}_windows
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: translate_bot_v${{ github.event.release.tag_name }}_${{ matrix.os == 'ubuntu-latest' && 'linux' || (matrix.os == 'windows-latest' && 'windows' || 'mac_os_x') }}
          path: dist/

  upload-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Compress individual artifacts
        run: |
          cd artifacts
          for dir in */; do
            zip -r "${dir%/}.zip" "$dir"
          done
        shell: bash

      - name: Upload individual artifacts
        run: |
          cd artifacts
          for file in *.zip; do
            echo "Uploading $file to release..."
            echo "ASSET_PATH=./artifacts/$file" >> $GITHUB_ENV
            echo "ASSET_NAME=$file" >> $GITHUB_ENV
            echo ::set-output name=upload_url::${{ github.event.release.upload_url }}
            echo ::set-output name=asset_path::./artifacts/$file
            echo ::set-output name=asset_name::$file
            echo ::set-output name=asset_content_type::application/zip

            echo "Uploading $file to release..."
            uses: actions/upload-release-asset@v1
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
              upload_url: ${{ steps.zip_files.outputs.upload_url }}
              asset_path: ${{ steps.zip_files.outputs.asset_path }}
              asset_name: ${{ steps.zip_files.outputs.asset_name }}
              asset_content_type: application/zip
          done
        shell: bash
